{"mappings":"AAAA,MAAMA,EAAW,mEACXC,EAAY,wEAEZC,EAAwBC,MAAOC,EAAUC,EAAWC,KACtD,MAAMC,QAAeC,mBAAmBJ,EAAUC,EAAWC,GACvDG,QAAoBF,EAAOG,KAAKC,GAAcA,EAAEC,WAGtD,MAAO,CACHC,kBAHsBN,EAAOG,KAAKC,GAAcA,EAAEG,MAIlDL,YAAeA,EACfM,oBAJwBR,EAAOG,KAAKC,GAAcA,EAAEK,aAQ5Dd,EAAsBF,EAAUC,GAAW,GACtCgB,MAAKC,IACFC,QAAQC,IAAIF,EAAST,aACrB,MASMY,EAAS,CACXC,KAAM,OACNC,KAXS,CACTC,OAAQN,EAASL,YACjBY,SAAU,CAAC,CACPC,MAAO,QACPC,gBAAiB,qBACjBC,YAAa,qBACbL,KAAML,EAAST,eAMnBoB,QAAS,CACLC,QAAS,CACPC,OAAQ,CACNC,SAAS,MAKL,IAAIC,MACpBC,SAASC,eAAe,WACxBd,MAGHe,OAAMC,GAAOlB,QAAQC,IAAIiB,KAE9BnC,EAAsBF,EAAUC,GAAW,GACtCgB,MAAKC,IACF,MASMG,EAAS,CACXC,KAAM,OACNC,KAXS,CACTC,OAAQN,EAASL,YACjBY,SAAU,CAAC,CACPC,MAAO,QACPC,gBAAiB,qBACjBC,YAAa,qBACbL,KAAML,EAAST,eAMnBoB,QAAS,CACLC,QAAS,CACPC,OAAQ,CACNC,SAAS,MAKL,IAAIC,MACpBC,SAASC,eAAe,oBACxBd,MAGHe,OAAMC,GAAOlB,QAAQC,IAAIiB,KAE9BnC,EAAsBF,EAAUC,GAAW,GACtCgB,MAAKC,IACF,MASMG,EAAS,CACXC,KAAM,OACNC,KAXS,CACTC,OAAQN,EAASL,YACjBY,SAAU,CAAC,CACPC,MAAO,YACPC,gBAAiB,qBACjBC,YAAa,qBACbL,KAAML,EAASH,iBAMnBc,QAAS,CACLC,QAAS,CACPC,OAAQ,CACNC,SAAS,MAKL,IAAIC,MACpBC,SAASC,eAAe,4BACxBd,MAGHe,OAAMC,GAAOlB,QAAQC,IAAIiB,KAE9BnC,EAAsBF,EAAUC,GAAW,GACtCgB,MAAKC,IACF,MASMG,EAAS,CACXC,KAAM,OACNC,KAXS,CACTC,OAAQN,EAASL,YACjBY,SAAU,CAAC,CACPC,MAAO,YACPC,gBAAiB,qBACjBC,YAAa,qBACbL,KAAML,EAASH,iBAMnBc,QAAS,CACLC,QAAS,CACPC,OAAQ,CACNC,SAAS,MAKL,IAAIC,MACpBC,SAASC,eAAe,qBACxBd,MAGHe,OAAMC,GAAOlB,QAAQC,IAAIiB","sources":["src/js/monthly.js"],"sourcesContent":["const runTable = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-run-data\"\nconst runTable2 = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-past-run-data\"\n\nconst getMonthlyGroupedData = async (runTable, runTable2, isSorted) => {\n    const result = await groupedMonthlyData(runTable, runTable2, isSorted)\n    const monthValues = await result.map((x) => {return x.distance})\n    const monthLabels = await result.map((x) => {return x.key})\n    const monthRunCount = await result.map((x) => {return x.runCount})\n    return {\n        'monthLabels': monthLabels,\n        'monthValues': monthValues,\n        'monthRunCount': monthRunCount\n    }\n}\n\ngetMonthlyGroupedData(runTable, runTable2, true)\n    .then(response => {\n        console.log(response.monthValues)\n        const data = {\n            labels: response.monthLabels,\n            datasets: [{\n                label: 'Miles',\n                backgroundColor: 'rgb(140, 192, 221)',\n                borderColor: 'rgb(140, 192, 221)',\n                data: response.monthValues,\n            }]\n        }\n        const config = {\n            type: 'line',\n            data: data,\n            options: {\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                }\n              }\n          };\n        const myChart = new Chart(\n        document.getElementById('myChart'),\n        config\n        );\n    })\n    .catch(err => console.log(err))\n\ngetMonthlyGroupedData(runTable, runTable2, false)\n    .then(response => {\n        const data = {\n            labels: response.monthLabels,\n            datasets: [{\n                label: 'Miles',\n                backgroundColor: 'rgb(140, 192, 221)',\n                borderColor: 'rgb(140, 192, 221)',\n                data: response.monthValues,\n            }]\n        }\n        const config = {\n            type: 'line',\n            data: data,\n            options: {\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                }\n              }\n          };\n        const myChart = new Chart(\n        document.getElementById('dateMonthlyChart'),\n        config\n        );\n    })\n    .catch(err => console.log(err))\n\ngetMonthlyGroupedData(runTable, runTable2, false)\n    .then(response => {\n        const data = {\n            labels: response.monthLabels,\n            datasets: [{\n                label: 'Run Count',\n                backgroundColor: 'rgb(140, 192, 221)',\n                borderColor: 'rgb(140, 192, 221)',\n                data: response.monthRunCount,\n            }]\n        }\n        const config = {\n            type: 'line',\n            data: data,\n            options: {\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                }\n              }\n          };\n        const myChart = new Chart(\n        document.getElementById('runCountDateMonthlyChart'),\n        config\n        );\n    })\n    .catch(err => console.log(err))\n\ngetMonthlyGroupedData(runTable, runTable2, true)\n    .then(response => {\n        const data = {\n            labels: response.monthLabels,\n            datasets: [{\n                label: 'Run Count',\n                backgroundColor: 'rgb(140, 192, 221)',\n                borderColor: 'rgb(140, 192, 221)',\n                data: response.monthRunCount,\n            }]\n        }\n        const config = {\n            type: 'line',\n            data: data,\n            options: {\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                }\n              }\n          };\n        const myChart = new Chart(\n        document.getElementById('runCountHighToLow'),\n        config\n        );\n    })\n    .catch(err => console.log(err))\n"],"names":["$6c89d7f8e6db21f1$var$runTable","$6c89d7f8e6db21f1$var$runTable2","$6c89d7f8e6db21f1$var$getMonthlyGroupedData","async","runTable","runTable2","isSorted","result","groupedMonthlyData","monthValues","map","x","distance","monthLabels","key","monthRunCount","runCount","then","response","console","log","config","type","data","labels","datasets","label","backgroundColor","borderColor","options","plugins","legend","display","Chart","document","getElementById","catch","err"],"version":3,"file":"monthly.a6921b10.js.map"}