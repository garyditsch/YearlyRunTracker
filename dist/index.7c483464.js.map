{"mappings":"AACA,MAAMA,WAAaC,MAAOC,EAAKC,KAC3B,IAEI,aADkBC,MAAMF,IACbG,OACb,MAAOC,GACLC,QAAQC,IAAI,iBAAkBF,GACjC,QACGC,QAAQC,IAAI,2BAQdC,cAAgBR,MAAOS,GAASA,EAAKC,KAAKC,IAErC,CACHC,KAAMC,GAAGC,QAAQ,IAAIC,KAAKJ,EAAG,mBAC7BK,MAAiC,SAAzBC,OAAON,EAAa,UAC5BO,mBAAiE,GAA3C,IAAIH,KAAKJ,EAAG,kBAAkBQ,WAAoB,IAAIJ,KAAKJ,EAAG,kBAAkBS,aAAgB,IAAIL,KAAKJ,EAAG,kBAAkBU,qBAAuB,GAC3KC,MAAO,IAA4B,OAAtBX,EAAG,kBAChBY,YAAcZ,EAAG,gBAAkB,GACnCa,YAAa,IAAOb,EAAG,gBAAkB,GACzCA,GAAIA,MAKNc,QAAUzB,MAAO0B,IACnB,IACqBX,KAAKY,MACtB,MAAMlB,QAAaV,WAAW2B,GACdX,KAAKY,MAIrB,aAFoBnB,cAAcC,GAGpC,MAAOJ,GACLC,QAAQC,IAAI,0BAA2BF,GAC1C,QACGC,QAAQC,IAAI,iCAIdqB,mBAAqB5B,MAAO6B,EAAQC,EAAQC,GAAS,KACvD,IACqBhB,KAAKY,MACtB,MAAMlB,QAAaV,WAAW8B,GACxBG,QAAcjC,WAAW+B,GACff,KAAKY,MAErB,MAAMM,EAAQ,IAAIxB,KAASuB,GACrBE,QAAc1B,cAAcyB,GAClC3B,QAAQC,IAAI2B,GAEZ,MAAMC,EAAeD,EAAME,MAAK,CAACC,EAAEC,IACxBD,EAAEzB,KAAO0B,EAAE1B,OAOhB2B,EAJS1B,GAAG2B,OACbC,KAAIC,GAAKA,EAAE9B,KAAK+B,eAAe,UAAW,CAAEC,MAAO,OAAQC,KAAM,cACjEC,QAAQX,GAEczB,KAAKkC,IAC5B,MAAMG,EAAWH,EAAMI,OAAOC,QAAO,CAACC,EAAOC,IAClCD,EAAQC,EAAInC,OACpB,GACH,MAAO,CACHyB,IAAKG,EAAMH,IACXW,SAAUC,SAASN,GACnBO,SAAUV,EAAMI,OAAOO,WAG/B,IAAe,IAAXxB,EAAgB,CAChB,MAAMyB,EAAmBjB,EAAYH,MAAK,CAACC,EAAGC,IACnCA,EAAEc,SAAWf,EAAEe,WAG1B,OADA9C,QAAQC,IAAIiD,GACLA,EAGX,OADAlD,QAAQC,IAAIgC,GACLA,EACT,MAAOlC,GACLC,QAAQC,IAAI,0BAA2BF,GAC1C,QACGC,QAAQC,IAAI","sources":["src/js/data.js"],"sourcesContent":["// Fetch the data from the csv file\nconst getRunData = async (url, offset) => {\n    try {\n        const res = await fetch(url);\n        return res.json()\n    } catch (err) {\n        console.log('get data error', err)\n    } finally {\n        console.log('get data has finished')\n    }\n}\n\n// map over the data and return a new array with just the formatted date and distance of the commute\n// this format was utilized by the example I worked from would like to improve with additional data\n// convert from km to miles\n// TODO: bring in other data for additional data sources\nconst runDateValues = async (data) => data.map((dv) => {\n\n    return {\n        date: d3.timeDay(new Date(dv['Activity Date'])),\n        value: (Number(dv['Distance']) * 0.6213712),\n        minutesOfDayStart: (((new Date(dv['Activity Date']).getHours() * 60) + (new Date(dv['Activity Date']).getMinutes()) - new Date(dv['Activity Date']).getTimezoneOffset()) / 60 ),\n        speed: 60 / (dv[\"Average Speed\"] * 2.2369),\n        runDuration: (dv['Elapsed Time'] / 60),\n        isFortyFive: 45 <= (dv['Elapsed Time'] / 60),\n        dv: dv,\n    }}\n);\n\n\nconst theData = async (table) => {\n    try {\n        let beforeTime = Date.now()\n        const data = await getRunData(table)\n        let afterTime = Date.now()\n        \n        const dates = await runDateValues(data)\n        \n        return dates\n    } catch (err) {\n        console.log('the data function error', err)\n    } finally {\n        console.log('done with the data function')\n    }\n}\n\nconst groupedMonthlyData = async (table1, table2, sorted = true) => {\n    try {\n        let beforeTime = Date.now()\n        const data = await getRunData(table1)\n        const data2 = await getRunData(table2)\n        let afterTime = Date.now()\n\n        const data3 = [...data, ...data2]\n        const dates = await runDateValues(data3)\n        console.log(dates)\n\n        const datesInOrder = dates.sort((a,b) => {\n            return a.date - b.date\n        })\n\n        const months = d3.nest()\n            .key(d => d.date.toLocaleString('default', { month: 'long', year: 'numeric' }))\n            .entries(datesInOrder)\n\n        const monthTotals = months.map((month) => {\n            const subTotal = month.values.reduce((total, num) => { \n                return total + num.value              \n            }, 0)\n            return {\n                key: month.key,\n                distance: parseInt(subTotal),\n                runCount: month.values.length\n            }\n        })\n        if( sorted === true){\n            const sortedMonthTotal = monthTotals.sort((a, b) => {\n                return b.distance - a.distance\n            })\n            console.log(sortedMonthTotal)        \n            return sortedMonthTotal\n        }\n        console.log(monthTotals)\n        return monthTotals        \n    } catch (err) {\n        console.log('the data function error', err)\n    } finally {\n        console.log('done with the data function')\n    }\n}"],"names":["getRunData","async","url","offset","fetch","json","err","console","log","runDateValues","data","map","dv","date","d3","timeDay","Date","value","Number","minutesOfDayStart","getHours","getMinutes","getTimezoneOffset","speed","runDuration","isFortyFive","theData","table","now","groupedMonthlyData","table1","table2","sorted","data2","data3","dates","datesInOrder","sort","a","b","monthTotals","nest","key","d","toLocaleString","month","year","entries","subTotal","values","reduce","total","num","distance","parseInt","runCount","length","sortedMonthTotal"],"version":3,"file":"index.7c483464.js.map"}