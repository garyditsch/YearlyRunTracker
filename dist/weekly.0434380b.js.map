{"mappings":"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","sources":["node_modules/date-fns/esm/_lib/requiredArgs/index.js","node_modules/date-fns/esm/toDate/index.js","node_modules/date-fns/esm/_lib/toInteger/index.js","node_modules/date-fns/esm/startOfWeek/index.js","node_modules/date-fns/esm/getWeekYear/index.js","node_modules/date-fns/esm/startOfWeekYear/index.js","src/js/weekly.js","node_modules/date-fns/esm/getWeek/index.js"],"sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {Date} the start of a week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setDate(date.getDate() - diff);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import startOfWeek from \"../startOfWeek/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the local week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport default function getWeekYear(dirtyDate, options) {\n  var _options$locale, _options$locale$optio;\n\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getFullYear();\n  var localeFirstWeekContainsDate = options === null || options === void 0 ? void 0 : (_options$locale = options.locale) === null || _options$locale === void 0 ? void 0 : (_options$locale$optio = _options$locale.options) === null || _options$locale$optio === void 0 ? void 0 : _options$locale$optio.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = (options === null || options === void 0 ? void 0 : options.firstWeekContainsDate) == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  var startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  var startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getWeekYear from \"../getWeekYear/index.js\";\nimport startOfWeek from \"../startOfWeek/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Date} the start of a week-numbering year\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport default function startOfWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  var date = startOfWeek(firstWeek, dirtyOptions);\n  return date;\n}","import { getWeek } from 'date-fns'\n\nconst runTable = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-run-data\"\nconst runTable2 = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-past-run-data\"\n\nconst parseWeeklyData = (data) => {\n    const months = data.reduce((acc, x) => {\n        //get date\n        const date = new Date(x.date)\n\n        //get week\n        const week = getWeek(date, {weekStartsOn: 1})\n        \n        //create key\n        const year = `${date.getFullYear()}-${week}`\n\n        //add key as property to return object\n        if(!acc[year]){\n            acc[year] = []\n        }\n\n        // push current data onto array\n        acc[year].push(x)\n\n        return acc        \n    }, {})\n    return months\n}\n\nconst getWeeklyStats = (data) => {\n    const result = data.map((x) => {\n        const fortyfive = x[1].filter((y) => {\n            // y.isFortyFive\n            if(y.isFortyFive === true){\n                return y\n            }\n            \n        })\n        const weekDuration = x[1].reduce((prev, curr) => {\n            prev = prev + curr.runDuration\n            return prev\n        }, 0)\n        const weekDistance = x[1].reduce((prev, curr) => {\n            prev = prev + curr.value\n            return prev\n        }, 0)\n        if(fortyfive.length > 3){\n            return {\n                'firstRunDate': x[1][0].date ? x[1][0].date : 'no run', \n                'week': x[0],\n                'numberOfRuns': x[1].length,\n                'weekDistance': weekDistance,\n                'weekDuration': weekDuration,\n                'fortyFiveSuccess': true,\n                'runsOverFortyFive': fortyfive.length\n            }\n        } else {\n            return {\n                'firstRunDate': x[1][0].date ? x[1][0].date : 'no run', \n                'week': x[0],\n                'numberOfRuns': x[1].length,\n                'weekDistance': weekDistance,\n                'weekDuration': weekDuration,\n                'fortyFiveSuccess': false,\n                'runsOverFortyFive': fortyfive.length\n            }\n        }\n    })\n\n    return result\n}\n\nconst getWeeklyData = async (runTable, runTable2) => {\n    const data = await getRunData(runTable)\n    const data2 = await getRunData(runTable2)\n    let afterTime = Date.now()\n\n    const data3 = [...data, ...data2]\n    const dates = await runDateValues(data3)\n\n    const datesInOrder = dates.sort((a,b) => {\n        return a.date - b.date\n    })\n\n    const weeks = await parseWeeklyData(datesInOrder)\n    const entries = Object.entries(weeks);\n    \n    const results = getWeeklyStats(entries)\n    console.log(results)\n    return results\n}\n\n\ngetWeeklyData(runTable, runTable2)\n    .then(response => {\n        const weeklyLabelsInChrono = response.map((x) => {return x.week})\n        const weeklyDistanceArray = response.map((x) => {return parseFloat(x.weekDistance.toFixed(2))})\n        // console.log(weeklyDistanceArray)\n        const data = {\n            labels: weeklyLabelsInChrono,\n            datasets: [{\n                label: 'Miles',\n                backgroundColor: 'rgb(140, 192, 221)',\n                borderColor: 'rgb(140, 192, 221)',\n                data: weeklyDistanceArray,\n            }]\n        }\n        const config = {\n            type: 'bar',\n            data: data,\n            options: {\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                }\n              }\n          };\n        const myWeeklyChart = new Chart(\n        document.getElementById('myWeeklyChart'),\n        config\n        );\n    })\n    .catch(err => console.log(err))\n\ngetWeeklyData(runTable, runTable2)\n    .then(response => {\n        const weeklyLabelsInChrono = response.map((x) => {return x.week})\n        const weeklyFortyFiveArray = response.map((x) => {return x.runsOverFortyFive})\n        console.log(weeklyFortyFiveArray)\n        const data = {\n            labels: weeklyLabelsInChrono,\n            datasets: [{\n                label: 'Success',\n                backgroundColor: 'rgb(140, 192, 221)',\n                borderColor: 'rgb(140, 192, 221)',\n                data: weeklyFortyFiveArray,\n            }]\n        }\n        const config = {\n            type: 'bar',\n            data: data,\n            options: {\n                plugins: {\n                  legend: {\n                    display: false\n                  }\n                },\n                scales: {\n                    y: {\n                        ticks: {\n                            callback: function(value, index, values) {\n                                if(value == 4){\n                                    return 'Success';\n                                } else {\n                                    return value\n                                }\n                            }\n                        }\n                    }\n                }\n              }\n          };\n        const myWeeklySuccessChart = new Chart(\n        document.getElementById('myWeeklySuccessChart'),\n        config\n        );\n    })\n    .catch(err => console.log(err))\n\n\n\n","import startOfWeek from \"../startOfWeek/index.js\";\nimport startOfWeekYear from \"../startOfWeekYear/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000;\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @returns {Number} the week\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport default function getWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfWeek(date, options).getTime() - startOfWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}"],"names":["$377d1ce359384586$export$2e2bcd8739ae039","required","args","length","TypeError","$bce2d00733a79246$export$2e2bcd8739ae039","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","$a874c42e2166676d$export$2e2bcd8739ae039","dirtyNumber","number","Number","isNaN","Math","ceil","floor","$5808e7e2a5fbbc4c$export$2e2bcd8739ae039","dirtyDate","dirtyOptions","options","locale","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","RangeError","date","day","getDay","diff","setDate","getDate","setHours","$73038cccee83d214$export$2e2bcd8739ae039","_options$locale","_options$locale$optio","year","getFullYear","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","setFullYear","startOfNextYear","firstWeekOfThisYear","startOfThisYear","$a6379a6e1c52ffad$export$2e2bcd8739ae039","firstWeek","$85704c958a190a8f$var$parseWeeklyData","data","reduce","acc","x","week","round","$9e53948deed625c0$export$2e2bcd8739ae039","push","$85704c958a190a8f$var$getWeeklyData","async","runTable","runTable2","getRunData","data2","now","data3","datesInOrder","runDateValues","sort","a","b","weeks","results","map","fortyfive","filter","y","isFortyFive","weekDuration","prev","curr","runDuration","weekDistance","value","firstRunDate","numberOfRuns","fortyFiveSuccess","runsOverFortyFive","$85704c958a190a8f$var$getWeeklyStats","entries","log","then","response","config","type","labels","datasets","label","backgroundColor","borderColor","parseFloat","toFixed","plugins","legend","display","Chart","document","getElementById","catch","err","weeklyLabelsInChrono","weeklyFortyFiveArray","scales","ticks","callback","index","values"],"version":3,"file":"weekly.0434380b.js.map"}