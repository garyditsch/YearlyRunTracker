{"mappings":"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","sources":["src/js/data.js"],"sourcesContent":["const runTable = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-run-data\"\nconst runTable2 = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-past-run-data\"\n\n// Fetch the data from the csv file\nconst getRunData = async (url, offset) => {\n    try {\n        const res = await fetch(url);\n        return res.json()\n    } catch (err) {\n        console.log('get data error', err)\n    } finally {\n        console.log('get data has finished')\n    }\n}\n\n// map over the data and return a new array with just the formatted date and distance of the commute\n// this format was utilized by the example I worked from would like to improve with additional data\n// convert from km to miles\n// TODO: bring in other data for additional data sources\nconst runDateValues = async (data) =>  data.map((dv) => {\n\n    return {\n        date: d3.timeDay(new Date(dv['Activity Date'])),\n        value: (Number(dv['Distance']) * 0.6213712),\n        minutesOfDayStart: (((new Date(dv['Activity Date']).getHours() * 60) + (new Date(dv['Activity Date']).getMinutes()) - new Date(dv['Activity Date']).getTimezoneOffset()) / 60 ),\n        speed: 60 / (dv[\"Average Speed\"] * 2.2369),\n        runDuration: (dv['Elapsed Time'] / 60),\n        isFortyFive: 45 <= (dv['Elapsed Time'] / 60),\n        dv: dv,\n    }}\n);\n\n\nconst theData = async (table) => {\n    try {\n        let beforeTime = Date.now()\n        const data = await getRunData(table)\n        let afterTime = Date.now()\n        \n        const dates = await runDateValues(data)\n        \n        return dates\n    } catch (err) {\n        console.log('the data function error', err)\n    } finally {\n        console.log('done with the data function')\n    }\n}\n\nconst allOfTheData = async (table, table2) => {\n    const data1 = await getRunData(table)\n    const data2 = await getRunData(table2)\n    const data3 = [...data1, ...data2]\n    return data3\n}\n\nallOfTheData(runTable, runTable2)\n    .then((res) => res)\n    .then((data) => {\n        console.log('allOfTheData', data)\n        console.log(typeof(data))\n        const now = Date.now();\n        // data.updated = now;\n        data = [...data, now]\n        window.localStorage.setItem(\"runData\", JSON.stringify(data));   \n})\n\nconst groupedMonthlyData = async (table1, table2, sorted = true) => {\n    try {\n        // let storedData = localStorage.getItem('runData');\n        const storedData = false;\n        console.log(storedData)\n        if(storedData){\n            let array = JSON.parse(storedData);\n            var dates = await runDateValues(array)\n        } else {\n            const data = await getRunData(table1)\n            const data2 = await getRunData(table2)\n            const data3 = [...data, ...data2]\n            var dates = await runDateValues(data3)\n        }\n\n        const datesInOrder = dates.sort((a,b) => {\n            return a.date - b.date\n        })\n\n        const months = d3.nest()\n            .key(d => d.date.toLocaleString('default', { month: 'long', year: 'numeric' }))\n            .entries(datesInOrder)\n\n        const monthTotals = months.map((month) => {\n            const subTotal = month.values.reduce((total, num) => { \n                return total + num.value              \n            }, 0)\n            return {\n                key: month.key,\n                distance: parseInt(subTotal),\n                runCount: month.values.length\n            }\n        })\n        if( sorted === true){\n            const sortedMonthTotal = monthTotals.sort((a, b) => {\n                return b.distance - a.distance\n            })\n            return sortedMonthTotal\n        }\n        console.log(monthTotals)\n        return monthTotals        \n    } catch (err) {\n        console.log('the data function error', err)\n    } finally {\n        console.log('done with the data function')\n    }\n}\n\n"],"names":[],"version":3,"file":"index.16223c9f.js.map","sourceRoot":"/__parcel_source_root/"}