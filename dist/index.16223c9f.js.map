{"mappings":"AAAA,MAAM,QAAQ,GAAG,kEAAkE;AACnF,MAAM,SAAS,GAAG,uEAAuE;AAEzF,wDAAwD;AACxD,MAAM,UAAU,GAAG,OAAO,GAAG,GAAK;IAC9B,IAAI;QACA,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,AAAC;QAC7B,OAAO,GAAG,CAAC,IAAI,EAAE,CAAA;KACpB,CAAC,OAAO,GAAG,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC;KACrC,QAAS;QACN,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;KACvC;CACJ;AAED,oGAAoG;AACpG,mGAAmG;AACnG,2BAA2B;AAC3B,wDAAwD;AACxD,MAAM,aAAa,GAAG,OAAO,IAAI,GAAM,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAK;QAEpD,OAAO;YACH,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;YAC/C,KAAK,EAAG,MAAM,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,GAAG,SAAS;YAC1C,iBAAiB,EAAG,AAAC,CAAA,AAAC,IAAI,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAK,IAAI,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,UAAU,EAAE,GAAI,IAAI,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAA,GAAI,EAAE;YAC7K,KAAK,EAAE,EAAE,GAAI,CAAA,EAAE,CAAC,eAAe,CAAC,GAAG,MAAM,CAAA,AAAC;YAC1C,WAAW,EAAG,EAAE,CAAC,cAAc,CAAC,GAAG,EAAE;YACrC,WAAW,EAAE,EAAE,IAAK,EAAE,CAAC,cAAc,CAAC,GAAG,EAAE,AAAC;YAC5C,EAAE,EAAE,EAAE;SACT,CAAA;KAAC,CACL;AAAC;AAGF,MAAM,OAAO,GAAG,OAAO,KAAK,EAAE,MAAM,GAAK;IACrC,IAAI;QACA,IAAI,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;YAC1C,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,KAAK,CAAC;YACrC,MAAM,KAAK,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC;YACtC,MAAM,KAAK,GAAG;mBAAI,KAAK;mBAAK,KAAK;aAAC;YAClC,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC;YACxC,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC;YACtC,OAAO,KAAK,CAAA;SACf,MAAM;YACH,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC;YAC7C,OAAO,KAAK,CAAA;SACf;KACJ,CAAC,OAAO,GAAG,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAE,GAAG,CAAC;KAC9C,QAAS;QACN,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC;KAC7C;CACJ,CAED,wEAAwE;CACxE,YAAY;CACZ,+DAA+D;CAC/D,oCAAoC;CACpC,kCAAkC;CAClC,0BAA0B;CAC1B,kDAAkD;CAClD,qDAAqD;CACrD,mBAAmB;CACnB,oDAAoD;CACpD,qDAAqD;CACrD,gDAAgD;CAChD,qDAAqD;CACrD,YAAY;CAEZ,qDAAqD;CACrD,qCAAqC;CACrC,aAAa;CAEb,mCAAmC;CACnC,8FAA8F;CAC9F,qCAAqC;CAErC,sDAAsD;CACtD,sEAAsE;CACtE,yDAAyD;CACzD,oBAAoB;CACpB,uBAAuB;CACvB,kCAAkC;CAClC,gDAAgD;CAChD,gDAAgD;CAChD,gBAAgB;CAChB,aAAa;CACb,gCAAgC;CAChC,oEAAoE;CACpE,iDAAiD;CACjD,iBAAiB;CACjB,sCAAsC;CACtC,YAAY;CACZ,mCAAmC;CACnC,qCAAqC;CACrC,sBAAsB;CACtB,sDAAsD;CACtD,kBAAkB;CAClB,qDAAqD;CACrD,QAAQ;CACR,IAAI;AAhDH","sources":["src/js/data.js"],"sourcesContent":["const runTable = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-run-data\"\nconst runTable2 = \"https://quizzical-tereshkova-82c9ca.netlify.app/api/get-past-run-data\"\n\n// Fetch the data from the Airtable via Netlify function\nconst getRunData = async (url) => {\n    try {\n        const res = await fetch(url);\n        return res.json()\n    } catch (err) {\n        console.log('get data error', err)\n    } finally {\n        console.log('get data has finished')\n    }\n}\n\n// map over the data and return a new array with just the formatted date and distance of the commute\n// this format was utilized by the example I worked from would like to improve with additional data\n// convert from km to miles\n// TODO: bring in other data for additional data sources\nconst runDateValues = async (data) =>  data.map((dv) => {\n\n    return {\n        date: d3.timeDay(new Date(dv['Activity Date'])),\n        value: (Number(dv['Distance']) * 0.6213712),\n        minutesOfDayStart: (((new Date(dv['Activity Date']).getHours() * 60) + (new Date(dv['Activity Date']).getMinutes()) - new Date(dv['Activity Date']).getTimezoneOffset()) / 60 ),\n        speed: 60 / (dv[\"Average Speed\"] * 2.2369),\n        runDuration: (dv['Elapsed Time'] / 60),\n        isFortyFive: 45 <= (dv['Elapsed Time'] / 60),\n        dv: dv,\n    }}\n);\n\n\nconst theData = async (table, table2) => {\n    try {\n        if (localStorage.getItem(\"runData\") === null) {\n            const data1 = await getRunData(table)\n            const data2 = await getRunData(table2)\n            const data3 = [...data1, ...data2]\n            const dates = await runDateValues(data3)\n            localStorage.setItem(\"runData\", dates)\n            return dates\n        } else {\n            const dates = localStorage.getItem(\"runData\")\n            return dates\n        }\n    } catch (err) {\n        console.log('the data function error', err)\n    } finally {\n        console.log('done with the data function')\n    }\n}\n\n// const groupedMonthlyData = async (table1, table2, sorted = true) => {\n//     try {\n//         // let storedData = localStorage.getItem('runData');\n//         const storedData = false;\n//         console.log(storedData)\n//         if(storedData){\n//             let array = JSON.parse(storedData);\n//             var dates = await runDateValues(array)\n//         } else {\n//             const data = await getRunData(table1)\n//             const data2 = await getRunData(table2)\n//             const data3 = [...data, ...data2]\n//             var dates = await runDateValues(data3)\n//         }\n\n//         const datesInOrder = dates.sort((a,b) => {\n//             return a.date - b.date\n//         })\n\n//         const months = d3.nest()\n//             .key(d => d.date.toLocaleString('default', { month: 'long', year: 'numeric' }))\n//             .entries(datesInOrder)\n\n//         const monthTotals = months.map((month) => {\n//             const subTotal = month.values.reduce((total, num) => { \n//                 return total + num.value              \n//             }, 0)\n//             return {\n//                 key: month.key,\n//                 distance: parseInt(subTotal),\n//                 runCount: month.values.length\n//             }\n//         })\n//         if( sorted === true){\n//             const sortedMonthTotal = monthTotals.sort((a, b) => {\n//                 return b.distance - a.distance\n//             })\n//             return sortedMonthTotal\n//         }\n//         console.log(monthTotals)\n//         return monthTotals        \n//     } catch (err) {\n//         console.log('the data function error', err)\n//     } finally {\n//         console.log('done with the data function')\n//     }\n// }\n\n"],"names":[],"version":3,"file":"index.16223c9f.js.map","sourceRoot":"/__parcel_source_root/"}